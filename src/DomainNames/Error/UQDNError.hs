module DomainNames.Error.UQDNError
  ( AsUQDNError, UQDNError( UQDNFullyQualifiedErr ), throwAsUQDNError )
where

-- base --------------------------------

import Control.Exception  ( Exception )
import Data.Eq            ( Eq( (==) ) )
import Data.Function      ( ($), (&), id )
import GHC.Stack          ( CallStack, callStack )
import Text.Show          ( Show )

-- base-unicode-symbols ----------------

import Data.Function.Unicode  ( (‚àò) )

-- data-textual ------------------------

import Data.Textual  ( Printable( print ) )

-- has-callstack -----------------------

import HasCallstack  ( HasCallstack( callstack ) )

-- lens --------------------------------

import Control.Lens.Lens    ( lens )
import Control.Lens.Prism   ( Prism', prism' )
import Control.Lens.Review  ( (#) )

-- more-unicode ------------------------

import Data.MoreUnicode.Bool   ( pattern ùï± )
import Data.MoreUnicode.Lens   ( (‚ä£), (‚ä¢), (‚©º) )
import Data.MoreUnicode.Maybe  ( pattern ùïµ, pattern ùïπ )

-- mtl ---------------------------------

import Control.Monad.Except  ( MonadError, throwError )

-- text --------------------------------

import Data.Text  ( Text )

-- text-printer ------------------------

import qualified  Text.Printer  as  P

-- tfmt --------------------------------

import Text.Fmt  ( fmt )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import DomainNames.Error.DomainError  ( AsDomainError( _DomainError )
                                      , DomainError )

--------------------------------------------------------------------------------

data UQDNError = UQDNFullyQualifiedErr Text CallStack
               | DomainErrorErr DomainError
  deriving Show

--------------------

instance Exception UQDNError

--------------------

instance Eq UQDNError where
  (UQDNFullyQualifiedErr t1 _) == (UQDNFullyQualifiedErr t2 _) = t1  == t2
  (DomainErrorErr        de1)  == (DomainErrorErr        de2)  = de1 == de2
  _                            == _                            = ùï±

--------------------

instance HasCallstack UQDNError where
  callstack = lens (\ case UQDNFullyQualifiedErr _ cs ‚Üí cs
                           DomainErrorErr de          ‚Üí de ‚ä£ callstack)
                   (\ ue cs ‚Üí case ue of UQDNFullyQualifiedErr t _ ‚Üí
                                           UQDNFullyQualifiedErr t cs
                                         DomainErrorErr de ‚Üí
                                           DomainErrorErr $ de & callstack ‚ä¢ cs
                   )

--------------------

instance Printable UQDNError where
  print (UQDNFullyQualifiedErr t _) =
    P.text $ [fmt|UQDN fully qualified: '%t'|] t
  print (DomainErrorErr e) = print e

--------------------

_UQDNNotFullyQualifiedErr ‚à∑ Prism' UQDNError Text
_UQDNNotFullyQualifiedErr = prism' (\ t ‚Üí UQDNFullyQualifiedErr t callStack)
                                   ( \ case
                                         (UQDNFullyQualifiedErr t _) ‚Üí ùïµ t
                                         _                           ‚Üí ùïπ
                                   )

--------------------

_DomainErrorErr ‚à∑ Prism' UQDNError DomainError
_DomainErrorErr = prism' DomainErrorErr
                         (\ case (DomainErrorErr e) ‚Üí ùïµ e; _ ‚Üí ùïπ)

------------------------------------------------------------

class AsUQDNError Œµ where
  _UQDNError ‚à∑ Prism' Œµ UQDNError

instance AsUQDNError UQDNError where
  _UQDNError = id

instance AsDomainError UQDNError where
  _DomainError = prism' DomainErrorErr (‚©º _DomainErrorErr)

--------------------

class ToUQDNError Œ± where
  toUQDNError ‚à∑ Œ± ‚Üí UQDNError

instance ToUQDNError UQDNError where
  toUQDNError = id

instance ToUQDNError DomainError where
  toUQDNError = DomainErrorErr

throwAsUQDNError ‚à∑ (ToUQDNError Œ±, AsUQDNError Œµ, MonadError Œµ Œ∑) ‚áí Œ± ‚Üí Œ∑ Œ≤
throwAsUQDNError = throwError ‚àò (_UQDNError #) ‚àò toUQDNError

-- that's all, folks! ----------------------------------------------------------
